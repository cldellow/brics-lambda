# Usage:
#   aws cloudformation --region us-east-1 create-stack --stack-name brics --template-body file://stack.yaml --capabilities CAPABILITY_IAM
#
# Heavily based on https://gist.github.com/magnetikonline/c314952045eee8e8375b82bc7ec68e88

AWSTemplateFormatVersion: "2010-09-09"
Description: "Lambda to execute a brics regex."

Parameters:
  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "brics"

Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "brics"
      Description: "My API"

  sslCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "*.brics.code402.com"
      ValidationMethod: "DNS"

  customDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties: 
      DomainName: !Sub "${AWS::Region}.brics.code402.com"
      EndpointConfiguration: 
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref sslCertificate

  cnameRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z2M7YRI8V9GBAF
      Name: !Sub "${AWS::Region}.brics.code402.com"
      ResourceRecords:
        - !GetAtt "customDomainName.RegionalDomainName"
      TTL: '60'
      Type: CNAME

  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: "brics"

  pathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - "sslCertificate"
      - "apiGatewayDeployment"
      - "cnameRecord"
    Properties: 
      BasePath: "test"
      DomainName: !Sub "${AWS::Region}.brics.code402.com"
      RestApiId: !Ref "apiGateway"
      Stage: "brics"
        #!Ref apiGatewayDeployment


  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub "code402-${AWS::Region}"
        S3Key: "brics.jar"
      Runtime: "java8"
      Description: "My function"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "com.cldellow.App"
      MemorySize: 256
      Role: !GetAtt "lambdaIAMRole.Arn"
      Timeout: 60

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/POST/"

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: "lambda"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 14

Outputs:
  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"
